import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { query, mutation } from "./_generated/server";

export const getAllPosts = query(async (ctx) => {
  return await ctx.db
    .query("posts")
    .order("desc")
    .collect();
});

export const getMyPosts = query(async (ctx) => {
  const identity = await ctx.auth.getUserIdentity();
  const userId = identity?.subject || "demo_user";
  
  return await ctx.db
    .query("posts")
    .filter((q) => q.eq(q.field("authorId"), userId))
    .order("desc")
    .collect();
});

export const deletePost = mutation({
  args: { postId: v.id("posts") },
  handler: async (ctx, args) => {
    const post = await ctx.db.get(args.postId);
    if (!post) throw new Error("Post not found");
    await ctx.db.delete(args.postId);
    return true;
  },
});

export const generateUploadUrl = mutation(async (ctx) => {
  const uploadUrl = await ctx.storage.generateUploadUrl();
  return uploadUrl;
});

export const createPost = mutation({
  args: {
    imageId: v.string(),
    caption: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    const userId = identity?.subject || "demo_user";

    const post = await ctx.db.insert("posts", {
      imageId: args.imageId,
      authorId: userId,
      caption: args.caption,
      likeCount: 0,
      commentCount: 0,
    });
    return post;
  },
});
